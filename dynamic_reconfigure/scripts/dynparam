#! /usr/bin/env python
#
# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of Willow Garage, Inc. nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Revision $Id$

NAME='dynparam'
import roslib; roslib.load_manifest('dynamic_reconfigure')
import rospy
import optparse 
import sys
import yaml
import dynamic_reconfigure

def do_list():
    connect()
    list = dynamic_reconfigure.find_reconfigure_services()
    for s in list:
        print s

def do_paramset():
    parser = optparse.OptionParser(usage="usage: %prog paramset [options] node\nexample: dynparam paramset wge100_camera _camera_url:=foo", prog=NAME)
    add_timeout_option(parser)
    options, args = parser.parse_args(myargv[2:])
    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) > 1:
        parser.error("too many arguments")
    node = args[0]

    connect()
    try:
        params = rospy.get_param("~")
    except KeyError:
        return
    set_params(node, params, timeout=options.timeout)

def do_set():
    parser = optparse.OptionParser(usage="usage: %prog set [options] node parameter value\nexample: dynparam set wge100_camera camera_url foo", prog=NAME)
    add_timeout_option(parser)
    options, args = parser.parse_args(myargv[2:])
    if len(args) < 3:
        parser.error("invalid arguments. Please specify a node name, parameter name and parameter value")
    elif len(args) > 3:
        parser.error("too many arguments")
    node, parameter, value = args[0], args[1], args[2]

    connect()
    try:
        set_params(node, { parameter : value }, timeout=options.timeout)
    except rospy.service.ServiceException:
        print 'couldn\'t set parameters at node %s' % node
    except rospy.exceptions.ROSException:
        print 'couldn\'t set parameters at node %s' % node

def do_get():
    parser = optparse.OptionParser(usage="usage: %prog get [options] node", prog=NAME)
    add_timeout_option(parser)
    options, args = parser.parse_args(myargv[2:])
    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) > 1:
        parser.error("too many arguments")
    node = args[0]

    connect()
    params = get_params(node, timeout=options.timeout)
    if params is not None:
        print params

def do_load():
    parser = optparse.OptionParser(usage="usage: %prog load [options] node file", prog=NAME)
    add_timeout_option(parser)
    options, args = parser.parse_args(myargv[2:])
    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        parser.error("invalid arguments. Please specify an input file")
    elif len(args) > 2:
        parser.error("too many arguments")
    node, path = args[0], args[1]

    f = file(path, 'r')
    try:
        params = {}
        for doc in yaml.load_all(f.read()):
            params.update(doc)
    finally:
        f.close()

    if node in params:
        connect()
        set_params(node, params[node], timeout=options.timeout)

def do_dump():
    parser = optparse.OptionParser(usage="usage: %prog dump [options] node file", prog=NAME)
    add_timeout_option(parser)
    options, args = parser.parse_args(myargv[2:])
    if len(args) == 0:
        parser.error("invalid arguments. Please specify a node name")
    elif len(args) == 1:
        parser.error("invalid arguments. Please specify an output file")
    elif len(args) > 2:
        parser.error("too many arguments")
    node, path = args[0], args[1]
    
    connect()
    params = get_params(node, timeout=options.timeout)
    if params is not None:
        f = file(path, 'w')
        try:
            yaml.dump({ node : params }, f)
            return
        finally:
            f.close()

    print "couldn't get parameters from node %s" % node

def get_params(node, timeout=None):
    client = dynamic_reconfigure.client.Client(node, timeout=timeout)
    return client.get_configuration(timeout=timeout)
    
def set_params(node, params, timeout=None):
    client = dynamic_reconfigure.client.Client(node, timeout=timeout)
    config = client.update_configuration(params)

def add_timeout_option(parser):
    parser.add_option('-t', '--timeout', action='store', type='float', default=None, help='timeout in secs')   

def print_usage():
    print """dynparam is a command-line tool for getting, setting, and
deleting parameters of a dynamically configurable node.

Commands:
\tdynparam set       configure node
\tdynparam paramset  copy dynparam parameters to node
\tdynparam get       get node configuration
\tdynparam load      load configuration from file
\tdynparam dump      dump configuration to file
\tdynparam list      list configurable nodes

Type dynparam <command> -h for more detailed usage, e.g. 'dynparam get -h'
"""

def connect():
    rospy.init_node("dynparam", anonymous=True)

if __name__ == '__main__':
    myargv = rospy.myargv()
    if len(myargv) == 1:
        print_usage()
    else:
        cmd = myargv[1]       
        if   cmd == "list":     do_list()
        elif cmd == "paramset": do_paramset()
        elif cmd == "set":      do_set()
        elif cmd == "get":      do_get()
        elif cmd == "load":     do_load()
        elif cmd == "dump":     do_dump()
        else:                   print_usage()
